@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject IHubContext<NotificationHub> HubContext

<div class="modal fade" id="modalId" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog" aria-labelledby="modalTitleId" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitleId">
                    @(User?.FullName ?? "Delete User")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (User != null)
                {
                    <p>@User.Email</p>
                    <p>@User.Campus?.CampusName</p>
                    <p>@User.Department?.DepartmentName</p>
                    <p>@User.Role</p>
                    <p>Are you sure you want to delete this user?</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger"  @onclick="HandleConfirm" >Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public User? User { get; set; }
    [Parameter] public EventCallback OnConfirmDelete { get; set; }

    private async Task HandleConfirm()
    {
        if (User != null)
        {
            await UserService.DeleteUser(User.UserCode); 
            await HubContext.Clients.All.SendAsync("ReloadPage");
            await OnConfirmDelete.InvokeAsync();
            await JSRuntime.InvokeVoidAsync("closeModal", "modalId");
        }
    }
}