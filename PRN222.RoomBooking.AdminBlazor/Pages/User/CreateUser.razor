@page "/create-user"
@layout MainLayout
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService
@inject IDepartmentService DepartmentService
@inject ICampusService CampusService
@inject NavigationManager Navigation

<div class="container mt-4">
    <h2 class="mb-4 text-center">Create User</h2>

    <EditForm Model="@newUser" OnValidSubmit="HandleCreateUser" class="card p-4">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Full Name</label>
            <InputText class="form-control" @bind-Value="newUser.FullName" />
            <ValidationMessage For="@(() => newUser.FullName)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Email</label>
            <InputText class="form-control" @bind-Value="newUser.Email" />
            <ValidationMessage For="@(() => newUser.Email)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Password</label>
            <InputText class="form-control" type="password" @bind-Value="newUser.Password" />
            <ValidationMessage For="@(() => newUser.Password)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Campus</label>
            <InputSelect class="form-select" @bind-Value="newUser.CampusId">
                @foreach (var campus in campuses)
                {
                    <option value="@campus.CampusId">@campus.CampusName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newUser.CampusId)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Department</label>
            <InputSelect class="form-select" @bind-Value="newUser.DepartmentId">
                @foreach (var department in departments)
                {
                    <option value="@department.DepartmentId">@department.DepartmentName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newUser.DepartmentId)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Role</label>
            <InputSelect class="form-select" @bind-Value="newUser.Role">
                <option value="Admin">Admin</option>
                <option value="User">User</option>
                <option value="Manager">Manager</option>
            </InputSelect>
            <ValidationMessage For="@(() => newUser.Role)" />
        </div>

        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Create</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @("alert-danger") mt-3">
                @message
            </div>
        }
    </EditForm>
</div>

@code {
    private User newUser = new();
    private List<Campus> campuses = new();
    private List<Department> departments = new();
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        campuses = await CampusService.GetCampus() ?? new List<Campus>();
        departments = await DepartmentService.GetDepartment() ?? new List<Department>();
    }

    private async Task HandleCreateUser()
    {
        try
        {
            var lastUser = await UserService.GetLastUser();
            int newNumber = 1;
            string numberPart = lastUser.UserCode.Substring(1);
            newNumber = int.Parse(numberPart) + 1;
            newUser.UserCode = $"U{newNumber:000}";
            var success = await UserService.CreateUser(newUser);
            if (success)
            {
                Navigation.NavigateTo("/user-manager");
            }
            else
            {
                message = "User creation failed";
            }
        }
        catch (Exception ex)
        {
            message = $"Error creating user: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/user-manager");
    }
}