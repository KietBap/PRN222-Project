@page "/login"
@layout DefautLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@inject NavigationManager Navigation

<div class="d-flex justify-content-center align-items-center vh-100 bg-light">
    <div class="card shadow-lg p-4" style="width: 400px; border-radius: 15px;">
        <h3 class="text-center fw-bold mb-4">Login</h3>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Email:</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                    <InputText @bind-Value="loginModel.Email" class="form-control" />
                </div>
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password:</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-lock"></i></span>
                    <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
                </div>
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Đang xử lý...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="text-danger text-center mt-3 fw-medium">@ErrorMessage</p>
        }
    </div>
</div>

@code {
    LoginModel loginModel = new LoginModel();
    string ErrorMessage = "";
    bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            ErrorMessage = "";
            StateHasChanged();

            var user = await UserService.Login(loginModel.Email, loginModel.Password);
            if (user != null)
            {
                if (user.Role.Equals("Admin"))
                {
                    var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, user.FullName),
                    new Claim(ClaimTypes.Role, user.Role)
                };

                    var claimsIdentity = new ClaimsIdentity(claims, "CustomAuth");
                    var principal = new ClaimsPrincipal(claimsIdentity);

                    if (AuthenticationStateProvider is CustomAuthenticationStateProvider customAuth)
                    {
                        await customAuth.SignInAsync(principal);
                    }

                    Navigation.NavigateTo("/");
                }
                else
                {
                    Navigation.NavigateTo("/login");
                    ErrorMessage = "You do not have access!";
                }
            }
            else
            {
                ErrorMessage = "Incorrect email or password!";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}